{"version":3,"sources":["components/LiveStocks/index.js","App.js","reportWebVitals.js","index.js"],"names":["months","days","LiveStocks","props","useEffect","getCurrentTime","d","Date","day","getDay","hr","getHours","min","getMinutes","ampm","getDate","getMonth","getFullYear","Fragment","class","data","map","el","index","toUpperCase","App","useState","WebSocket","ws","stockData","setStockData","onopen","console","log","onmessage","evt","message","JSON","parse","onclose","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAEIA,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvFC,EAAO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YA2F/DC,EA1FI,SAACC,GAChBC,qBAAU,cAEP,CAACD,IAEJ,IAAME,EAAiB,WACnB,IAAIC,EAAI,IAAIC,KACRC,EAAMP,EAAKK,EAAEG,UACbC,EAAKJ,EAAEK,WACPC,EAAMN,EAAEO,aACRD,EAAM,KACNA,EAAM,IAAMA,GAEhB,IAAIE,EAAO,KAQX,OAPIJ,EAAK,KACLA,GAAM,GACNI,EAAO,MAKJN,EAAM,IAAME,EAAK,IAAME,EAAME,EAAO,IAHhCR,EAAES,UAG2C,IAF5Cf,EAAOM,EAAEU,YAEiD,IAD3DV,EAAEW,eAGjB,OACI,cAAC,IAAMC,SAAP,UAEI,qBAAKC,MAAM,wBAAX,SACI,qBAAKA,MAAM,iCAAX,SACI,sBAAKA,MAAM,OAAX,UACI,8BACI,oBAAIA,MAAM,kDAAV,uCAEJ,qBAAKA,MAAM,mDAAX,SACI,sBAAKA,MAAM,4DAAX,UACI,wBAAOA,MAAM,4BAAb,UACI,gCACI,+BACI,oBACIA,MAAM,0HADV,oBAIA,oBACIA,MAAM,0HADV,mBAIA,oBACIA,MAAM,0HADV,+BAMR,gCAEQhB,EAAMiB,KAAKC,KAAI,SAACC,EAAIC,GAChB,OACI,+BACI,oBAAIJ,MAAM,sDAAV,SACI,qBAAKA,MAAM,oBAAX,SACI,mBAAGA,MAAM,6CAAT,SAAuDG,EAAG,GAAGE,oBAGrE,oBAAIL,MAAM,sDAAV,SACI,mBAAGA,MAAM,iDAAT,SAA2DG,EAAG,OAElE,oBAAIH,MAAM,sDAAV,SACI,mBAAGA,MAAM,iDAAT,SACKd,mBASjC,qBACIc,MAAM,kGADV,SAEI,sBAAMA,MAAM,mCAAZ,iDCnDrBM,MA3Bf,WAAgB,IAAD,EACOC,mBAAS,IAAIC,UAAU,8BAD9B,mBACNC,EADM,aAEqBF,mBAAS,KAF9B,mBAENG,EAFM,KAEKC,EAFL,KAoBb,OAjBA1B,qBAAU,WACRwB,EAAGG,OAAS,WAEVC,QAAQC,IAAI,cAEdL,EAAGM,UAAY,SAAAC,GAEb,IAAMC,EAAUC,KAAKC,MAAMH,EAAIf,MAC/BY,QAAQC,IAAI,YAAYG,GACxBN,EAAaM,IAEfR,EAAGW,QAAU,WACXP,QAAQC,IAAI,mBAGb,CAACL,EAAGM,YAGL,qBAAKM,UAAU,MAAf,SACE,cAAC,EAAD,CAAYpB,KAAMS,OCbTY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9be4e46d.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nvar months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\nvar days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\nconst LiveStocks = (props) => {\r\n    useEffect(() => {\r\n\r\n    }, [props]);\r\n\r\n    const getCurrentTime = () => {\r\n        var d = new Date();\r\n        var day = days[d.getDay()];\r\n        var hr = d.getHours();\r\n        var min = d.getMinutes();\r\n        if (min < 10) {\r\n            min = \"0\" + min;\r\n        }\r\n        var ampm = \"am\";\r\n        if (hr > 12) {\r\n            hr -= 12;\r\n            ampm = \"pm\";\r\n        }\r\n        var date = d.getDate();\r\n        var month = months[d.getMonth()];\r\n        var year = d.getFullYear();\r\n        return day + \" \" + hr + \":\" + min + ampm + \" \" + date + \" \" + month + \" \" + year;\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            {/* <h4>{props.data}</h4> */}\r\n            <div class=\"antialiased font-sans\">\r\n                <div class=\"container mx-auto px-4 sm:px-8\">\r\n                    <div class=\"py-8\">\r\n                        <div>\r\n                            <h2 class=\"text-2xl text-white font-semibold leading-tight\">Real Time Stocks Update</h2>\r\n                        </div>\r\n                        <div class=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n                            <div class=\"inline-block min-w-full shadow rounded-sm overflow-hidden\">\r\n                                <table class=\"min-w-full leading-normal\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th\r\n                                                class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                                                Ticket\r\n                                            </th>\r\n                                            <th\r\n                                                class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                                                Price\r\n                                            </th>\r\n                                            <th\r\n                                                class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                                                Last Updated\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                            props.data.map((el, index) => {\r\n                                                return (\r\n                                                    <tr>\r\n                                                        <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n                                                            <div class=\"flex items-center\">\r\n                                                                <p class=\"text-blue-900 font-bold whitespace-no-wrap\">{el[0].toUpperCase()}</p>\r\n                                                            </div>\r\n                                                        </td>\r\n                                                        <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n                                                            <p class=\"text-gray-900 font-semibold whitespace-no-wrap\">{el[1]}</p>\r\n                                                        </td>\r\n                                                        <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n                                                            <p class=\"text-gray-900 font-semibold whitespace-no-wrap\">\r\n                                                                {getCurrentTime()}\r\n                                                            </p>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                                <div\r\n                                    class=\"px-5 py-5 bg-white border-t flex flex-col xs:flex-row items-center xs:justify-between          \">\r\n                                    <span class=\"text-xs xs:text-sm text-gray-900\">\r\n                                        Showing 10 Entries\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default LiveStocks;","import React, { useState, useEffect } from 'react';\nimport LiveStocks from './components/LiveStocks';\n\nfunction App() {\n  const [ws, setWS] = useState(new WebSocket(\"ws://stocks.hulqmedia.com\"));\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n    }\n    ws.onmessage = evt => {\n      // listen to data sent from the websocket server\n      const message = JSON.parse(evt.data)\n      console.log('stocks...',message);\n      setStockData(message);\n    }\n    ws.onclose = () => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n    }\n  }, [ws.onmessage]);\n\n  return (\n    <div className=\"App\">\n      <LiveStocks data={stockData} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}